"use strict";

/**
 * Generated by Verge3D Puzzles v.2.4.3
 * Mon Jul 30 2018 23:12:24 GMT+0200
 * Do not edit this file.
 */

(function() {


// global variables/constants used by blocks' functions
var _pGlob = {};

// differs from the other utility callback arrays, cannot be used with the
// fireObjectPickingCallbacks() method
_pGlob.objClickCallbacks = [];
_pGlob.pickedObject = "";

_pGlob.objHoverCallbacks = [];
_pGlob.hoveredObject = "";
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfo = { 
    downX: 0, downY: 0, 
    prevX: 0, prevY: 0, 
    currX: 0, currY: 0, 
    isDowned: false,
    isMoved: false,
    touchId: -1 
};
_pGlob.dragMoveOrigins = {};
_pGlob.dragRotateOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.animMixerCallbacks = [];

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

PL.legacyMode = false;

PL.init = function(appInstance) {

var chair_combination, masse_visible;


        // openWebPage block
        function openWebPage(url, mode) {
            appInstance.controls.dispose();
            appInstance.enableControls();
            if (mode == "NEW") {
                window.open(url);
            } else {
                if (typeof window.PE != "undefined") {
                    if (window.confirm("Are you sure you want to leave Puzzles?"))
                        window.open(url, "_self");
                } else {
                    window.open(url, "_self");
                }
            }
        }



    // utility function envoked by the HTML puzzles
    function getElement(id, isParent) {
        var elem;
        if (Array.isArray(id) && id[0] == "DOCUMENT") {
            if (isParent)
                elem = parent.document;
            else
                elem = document;
        } else if (Array.isArray(id) && id[0] == "BODY") {
            if (isParent)
                elem = parent.document.body;
            else
                elem = document.body;
        } else {
            if (isParent)
                elem = parent.document.getElementById(id);
            else
                elem = document.getElementById(id);
        }
        return elem;
    }



        function eventHTMLElem(eventType, id, isParent, callback) {
            var elem = getElement(id, isParent);
            if (elem)
                elem.addEventListener(eventType, callback, false);
        }



    // utility function envoked by almost all V3D-specific blocks
    // process object input, which can be either single obj or array of objects, or a group
    function retrieveObjectNames(objNames) {
        if (!objNames)
            return;
        if (typeof objNames == "string")
            objNames = [objNames];
        else if (Array.isArray(objNames) && objNames[0] == "GROUP")
            objNames = getObjectNamesByGroupName(objNames[1]);
        else if (Array.isArray(objNames) && objNames[0] == "ALL_OBJECTS")
            objNames = getAllObjectNames();
        return objNames;
    }


// utility function envoked by almost all V3D-specific blocks
// find first occurence of the object by its name
var objCache = {};
function getObjectByName(objName) {
    var objFound;
    objFound = objCache[objName];
    if (objFound && objFound.name == objName)
        return objFound;
    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            objCache[objName] = objFound;
        }
    });
    return objFound;
}

// utility function envoked by almost all V3D-specific blocks
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}

// utility function envoked by almost all V3D-specific blocks
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}

// utility function envoked by almost all V3D-specific blocks
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type != "Scene" && obj.type != "AmbientLight" &&
            obj.name != "" && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}



        // show and hide blocks
        function changeVis(objNames, bool) {
            objNames = retrieveObjectNames(objNames);
            if (!objNames)
                return;
            for (var i = 0; i < objNames.length; i++) {
                var objName = objNames[i]
                if (!objName)
                    continue;
                var obj = getObjectByName(objName);
                if (!obj)
                    continue;
                obj.visible = bool;
            }
        }


/**
 * Describe this function...
 */
function measure_change() {
  if (chair_combination == 1) {
    changeVis("masse_sitzschale", true);
    changeVis("masse_sitzpolster", false);
  } else if (chair_combination == 2) {
    changeVis("masse_sitzpolster", true);
    changeVis("masse_sitzschale", false);
  }
}


        // assignMaterial block
        function assignMat(objNames, matName) {
            objNames = retrieveObjectNames(objNames);
            if (!objNames || !matName)
                return;
            var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
            if (!mat)
                return;
            for (var i = 0; i < objNames.length; i++) {
                var objName = objNames[i];
                if (!objName)
                    continue;
                var obj = getObjectByName(objName);
                if (obj)
                    obj.material = mat;
            }
        }



eventHTMLElem('click', 'mdlb-button', true, function(event) {
  openWebPage("https://vimeo.com/3dmedialab", "NEW");
});

eventHTMLElem('click', 'facebook-button', true, function(event) {
  openWebPage("https://www.facebook.com/pg/3dmedialab", "NEW");
});

eventHTMLElem('click', 'linkedin-button', true, function(event) {
  openWebPage("https://www.linkedin.com/in/jochen-haveresch/", "NEW");
});

eventHTMLElem('click', 'vimeo-button', true, function(event) {
  openWebPage("https://vimeo.com/3dmedialab", "NEW");
});

chair_combination = 1;
masse_visible = 0;

changeVis("plane_FABHAY1-pbr", false);
changeVis("plane_plastic-black-rauh_01", false);
changeVis("plane_plastic-white-rauh_01", false);
changeVis("plane_WDHAY1-pbr", false);
changeVis("plane_WDHAY2-pbr", false);
changeVis("masse_sitzpolster", false);
changeVis("masse_sitzschale", false);

eventHTMLElem('click', 'id-gest-hell', true, function(event) {
  assignMat("gestell01", "WDHAY1-pbr");
  if (masse_visible == 1) {
    measure_change();
  }
});

eventHTMLElem('click', 'id-dimensions', true, function(event) {
  if (masse_visible == 0) {
    measure_change();
    masse_visible = 1;
  } else if (masse_visible == 1) {
    changeVis("masse_sitzpolster", false);
    changeVis("masse_sitzschale", false);
    masse_visible = 0;
  }
});

eventHTMLElem('click', 'id-gest-schw', true, function(event) {
  assignMat("gestell01", "WDHAY2-pbr");
  if (masse_visible == 1) {
    measure_change();
  }
});

eventHTMLElem('click', 'id-sitz-weiss', true, function(event) {
  changeVis("sitzschale", true);
  changeVis("sitzpolster", false);
  assignMat("sitzschale", "plastic-white-rauh_01");
  chair_combination = 1;
  if (masse_visible == 1) {
    measure_change();
  }
});

eventHTMLElem('click', 'id-sitz-schw', true, function(event) {
  changeVis("sitzschale", true);
  changeVis("sitzpolster", false);
  assignMat("sitzschale", "plastic-black-rauh_01");
  chair_combination = 1;
  if (masse_visible == 1) {
    measure_change();
  }
});

eventHTMLElem('click', 'id-sitz-polst', true, function(event) {
  changeVis("sitzpolster", true);
  changeVis("sitzschale", false);
  chair_combination = 2;
  if (masse_visible == 1) {
    measure_change();
  }
});

}

if (window.v3dApp) {
   // backwards compatibility for old player projects
   PL.legacyMode = true;
   PL.init(window.v3dApp);
}

})();

/* ================== end of code ================== */