/**
 * Generated by Verge3D Puzzles v.2.16.0
 * Fri Dec 20 2019 12:32:19 GMT+0100 (Mitteleurop√§ische Normalzeit)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions
var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.objClickCallbacks = [];
_pGlob.pickedObject = '';
_pGlob.objHoverCallbacks = [];
_pGlob.hoveredObject = '';
_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.animMixerCallbacks = [];
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.animateParamUpdate = null;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.gamepadIndex = 0;

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();
_pGlob.timers = {};

_pGlob.wooProductInfo = {};

var _pPhysics = {};

_pPhysics.syncList = [];

// internal info
_pPhysics.collisionData = [];

// goes to collision callback
_pPhysics.collisionInfo = {
    objectA: '',
    objectB: '',
    distance: 0,
    positionOnA: [0, 0, 0],
    positionOnB: [0, 0, 0],
    normalOnB: [0, 0, 0]
};

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};

PL.execInitPuzzles = function() {
    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    

    
// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setCSSRuleStyle puzzle
function setCSSRuleStyle(prop, value, id, isParent) {
    var styles = (isParent) ? parent.document.styleSheets : document.styleSheets;
    for (var i = 0; i < styles.length; i++) {
        var cssRules = styles[i].cssRules;
        for (var j = 0; j < cssRules.length; j++) {
            if (cssRules[j].selectorText == id)
                cssRules[j].style[prop] = value;
        }
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}




// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = false;

setCSSRuleStyle('backgroundColor', '#ff8200', '.v3d-annotation', false);
setCSSRuleStyle('borderWidth', '2px', '.v3d-annotation', false);
setCSSRuleStyle('borderWidth', '2px', '.v3d-annotation', false);
setCSSRuleStyle('fontWeight', 'bold', '.v3d-annotation', false);
setCSSRuleStyle('backgroundImage', 'url("blitz.png")', '.v3d-annotation', false);
setCSSRuleStyle('transform', 'scale(.8)', '.v3d-annotation', false);
setCSSRuleStyle('zIndex', '1', '.v3d-annotation', false);

setHTMLElemStyle('cursor', 'all-scroll', 'container', false);


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_div', false);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {
initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}



var annos, animation;


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// addHTMLElement puzzle
function addHTMLElement(elemType, id, mode, targetId) {
    var elem = document.createElement(elemType);
    elem.id = id;
    elem.style.position = "absolute";

    var targetElem = getElement(targetId, false);
    if (targetElem instanceof Element) {
        switch (mode) {
            case "TO":
                targetElem.appendChild(elem);
                break;
            case "BEFORE":
                targetElem.insertAdjacentElement("beforebegin", elem);
                break;
            case "AFTER":
                targetElem.insertAdjacentElement("afterend", elem);
                break;
        }
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc;
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = typeof _pGlob != "undefined";
    objFound = runTime ? _pGlob.objCache[objName] : null;
    if (objFound && objFound.name == objName)
        return objFound;
    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime)
                _pGlob.objCache[objName] = objFound;
        }
    });
    return objFound;
}

// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}

// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type != "Scene" && obj.type != "AmbientLight" &&
            obj.name != "" && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}

// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}

/**
 * Blender/Max to Verge3D
 */
function swizzleValueSign(newAxis, value) {
    newAxis = newAxis.toLowerCase();

    if (newAxis == 'z') {
        if (typeof value == 'number')
            return -value
        else if (typeof value == 'string' && value != '' && value != "''" && value != '""')
            return String(-Number(value));
        else
            return value;
    } else
        return value;
}

/**
 * Blender/Max to Verge3D
 */
function swizzleVec3(vec, isScale) {

    var dest = []

    dest[0] = vec[0];
    dest[1] = vec[2];
    dest[2] = isScale ? vec[1] : swizzleValueSign('z', vec[1])

    return dest;
}

/**
 * Transform coordinates from Blender/Max to Verge3D coordinate system.
 * Can be used with Vector3 or Euler.
 */
function coordsBlenderToV3D(coords, noSignChange) {

    var y = coords.y, z = coords.z;

    coords.y = z;
    coords.z = noSignChange ? y : -y;

    return coords;
}

/**
 * Transform coordinates from Verge3D to Blender/Max coordinate system.
 * Can be used with Vector3 or Euler.
 */
function coordsV3DToBlender(coords, noSignChange) {

    var y = coords.y, z = coords.z;

    coords.y = noSignChange ? z : -z;
    coords.z = y;

    return coords;
}

/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsV3DToBlender(dest);
    }

}();

/**
 * mesh or multi-material object
 */
function isMeshObj(obj) {
    if (obj.isMesh)
        return true;

    for (var i = 0; i < obj.children.length; i++) {
        var child = obj.children[i];
        if (child.isMesh && child.isMaterialGeneratedMesh)
            return true;
    }

    return false;
}




// bindHTMLObject puzzle
function bindHTMLObject(objName, id, isParent) {
    if (!objName)
        return;
    var elem = getElement(id, isParent);
    if (!elem)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;
    var projected = new v3d.Vector3();
    elem.style.top = 0;
    elem.style.left = 0;
    appInstance.renderCallbacks.push(function() {
        obj.getWorldPosition(projected).project(appInstance.camera);
        projected.x = (0.5 + projected.x / 2) * appInstance.container.offsetWidth;
        projected.y = (0.5 - projected.y / 2) * appInstance.container.offsetHeight;
        elem.style.transform = "translate(" + projected.x + "px, " + projected.y + "px)";
    });
}



// addAnnotation and removeAnnotation puzzles
function handleAnnot(add, annot, objNames, contents, id) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        // check if it already has an annotation and remove it
        for (var j = 0; j < obj.children.length; j++) {
            var child = obj.children[j];
            if (child.type == "Annotation") {
                obj.remove(child);
                appInstance.container.removeChild(child.annotation);
            }
        }
        if (add) {
            var aObj = new v3d.Annotation(appInstance.container, annot, contents);
            aObj.name = annot;
            aObj.fadeObscured = _pGlob.fadeAnnotations;
            if (id) {
                aObj.annotation.id = id;
                aObj.annotationDialog.id = id+'_dialog';
            }
            obj.add(aObj);
        }
    }
}



// tweenCamera puzzle
function tweenCamera(posObjName, targetObjName, duration, doSlot) {
    if (!targetObjName)
        return;
    if (posObjName)
        var posObj = getObjectByName(posObjName);
    else
        var posObj = appInstance.camera;
    var targetObj = getObjectByName(targetObjName);
    if (!posObj || !targetObj)
        return;

    var wPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    var wTarget = targetObj.getWorldPosition(_pGlob.vec3Tmp2);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween)
            appInstance.controls.tween(wPos, wTarget, duration, doSlot);
    } else { // TODO: static camera, just position it for now
        if (appInstance.camera.parent)
            appInstance.camera.parent.worldToLocal(wPos);
        appInstance.camera.position.copy(wPos);
        appInstance.camera.lookAt(wTarget);
        doSlot();
    }
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback, false);
    }
}



// drawLineObjectHTML and removeLineObjectHTML puzzles
function operateLineObjectHTML(objNames, id, isParent, width, color, offset, op) {
    var elem = getElement(id, isParent);
    if (!elem && (op == "DRAW"))
        return;
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj) continue;

        for (var j = obj.children.length - 1; j >= 0; j--) {
            var child = obj.children[j];
            if (child.isLineHTML) {
                obj.remove(child);
                child.geometry.dispose();
                child.material.dispose();
            }
        }

        if (op == "DRAW") {
            var line = new v3d.LineHTML(new v3d.Color(color).convertSRGBToLinear(),
                    width);
            line.offset = offset;
            line.elemHTML = elem;
            obj.add(line);
        }
    }
}



// animation puzzles
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



// animation puzzles
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem[attr] = value;
    }
}



// openWebPage puzzle
function openWebPage(url, mode) {

    if (appInstance.controls) {
        appInstance.controls.dispose();
        appInstance.enableControls();
    }

    if (mode == "NEW") {
        window.open(url);
    } else if (mode == "NO_RELOAD") {
        history.pushState('verge3d state', 'verge3d page', url);
    } else {
        var target;
        switch (mode) {
            case "SAME":
                target = "_self";
                break;
            case "TOP":
                target = "_top";
                break;
            case "PARENT":
                target = "_parent";
                break;
        }
        if (typeof window.PE != "undefined") {
            if (window.confirm("Are you sure you want to leave Puzzles?"))
                window.open(url, target);
        } else {
            window.open(url, target);
        }
    }
}



addHTMLElement('div', 'titel', 'TO', ['BODY']);
setHTMLElemStyle('position', 'absolute', 'tittel', false);
setHTMLElemStyle('backgroundImage', 'url("titel.png")', 'titel', false);
setHTMLElemStyle('borderRadius', '12px 12px 12px 12px', 'titel', false);
setHTMLElemStyle('width', '270px', 'titel', false);
setHTMLElemStyle('height', '154px', 'titel', false);
setHTMLElemStyle('marginTop', '20px', 'titel', false);
setHTMLElemStyle('marginLeft', '20px', 'titel', false);
setHTMLElemStyle('zIndex', '2', 'titel', false);
setHTMLElemStyle('cursor', 'all-scroll', 'titel', true);

addHTMLElement('button', 'button_A', 'TO', ['BODY']);
setHTMLElemStyle('width', '36px', 'button_A', false);
setHTMLElemStyle('height', '36px', 'button_A', false);
setHTMLElemStyle('marginLeft', '-18px', 'button_A', false);
setHTMLElemStyle('marginTop', '-18px', 'button_A', false);
setHTMLElemStyle('borderRadius', '50%', 'button_02', false);
setHTMLElemStyle('opacity', '0', 'button_A', false);
setHTMLElemStyle('outline', 'none', 'button_A', false);
setHTMLElemStyle('cursor', 'pointer', 'button_A', true);
setHTMLElemStyle('zIndex', '2', 'button_A', true);
bindHTMLObject('button_A1', 'button_A', false);
handleAnnot(true, '', 'button_A1', '', '');

addHTMLElement('button', 'button_B', 'TO', ['BODY']);
setHTMLElemStyle('width', '36px', 'button_B', false);
setHTMLElemStyle('height', '36px', 'button_B', false);
setHTMLElemStyle('marginLeft', '-18px', 'button_B', false);
setHTMLElemStyle('marginTop', '-18px', 'button_B', false);
setHTMLElemStyle('borderRadius', '50%', 'button_B', false);
setHTMLElemStyle('opacity', '0', 'button_B', false);
setHTMLElemStyle('outline', 'none', 'button_B', false);
setHTMLElemStyle('cursor', 'pointer', 'button_B', true);
setHTMLElemStyle('zIndex', '2', 'button_B', true);
bindHTMLObject('button_B1', 'button_B', false);
handleAnnot(true, '', 'button_B1', '', '');

addHTMLElement('button', 'button_C', 'TO', ['BODY']);
setHTMLElemStyle('width', '36px', 'button_C', false);
setHTMLElemStyle('height', '36px', 'button_C', false);
setHTMLElemStyle('marginLeft', '-18px', 'button_C', false);
setHTMLElemStyle('marginTop', '-18px', 'button_C', false);
setHTMLElemStyle('borderRadius', '50%', 'button_C', false);
setHTMLElemStyle('opacity', '0', 'button_C', false);
setHTMLElemStyle('outline', 'none', 'button_C', false);
setHTMLElemStyle('cursor', 'pointer', 'button_C', true);
setHTMLElemStyle('zIndex', '2', 'button_C', true);
bindHTMLObject('button_C1', 'button_C', false);
handleAnnot(true, '', 'button_C1', '', '');

addHTMLElement('button', 'button_D', 'TO', ['BODY']);
setHTMLElemStyle('width', '36px', 'button_D', false);
setHTMLElemStyle('height', '36px', 'button_D', false);
setHTMLElemStyle('marginLeft', '-18px', 'button_D', false);
setHTMLElemStyle('marginTop', '-18px', 'button_D', false);
setHTMLElemStyle('borderRadius', '50%', 'button_D', false);
setHTMLElemStyle('opacity', '0', 'button_D', false);
setHTMLElemStyle('outline', 'none', 'button_D', false);
setHTMLElemStyle('cursor', 'pointer', 'button_D', true);
setHTMLElemStyle('zIndex', '2', 'button_D', true);
bindHTMLObject('button_D1', 'button_D', false);
handleAnnot(true, '', 'button_D1', '', '');

addHTMLElement('button', 'button_E', 'TO', ['BODY']);
setHTMLElemStyle('width', '36px', 'button_E', false);
setHTMLElemStyle('height', '36px', 'button_E', false);
setHTMLElemStyle('marginLeft', '-18px', 'button_E', false);
setHTMLElemStyle('marginTop', '-18px', 'button_E', false);
setHTMLElemStyle('borderRadius', '50%', 'button_E', false);
setHTMLElemStyle('opacity', '0', 'button_E', false);
setHTMLElemStyle('outline', 'none', 'button_E', false);
setHTMLElemStyle('cursor', 'pointer', 'button_E', true);
setHTMLElemStyle('zIndex', '2', 'button_E', true);
bindHTMLObject('button_E1', 'button_E', false);
handleAnnot(true, '', 'button_E1', '', '');

addHTMLElement('div', 'play', 'TO', ['BODY']);
setHTMLElemStyle('position', 'absolute', 'play', false);
setHTMLElemStyle('backgroundImage', 'url("play.png")', 'play', false);
setHTMLElemStyle('width', '186px', 'play', false);
setHTMLElemStyle('height', '27px', 'play', false);
setHTMLElemStyle('bottom', '0', 'play', false);
setHTMLElemStyle('marginLeft', '20px', 'play', false);
setHTMLElemStyle('marginBottom', '60px', 'play', false);
setHTMLElemStyle('display', 'none', 'play', false);
setHTMLElemStyle('zIndex', '2', 'play', false);

addHTMLElement('div', 'stop', 'TO', ['BODY']);
setHTMLElemStyle('position', 'absolute', 'stop', false);
setHTMLElemStyle('backgroundImage', 'url("stop.png")', 'stop', false);
setHTMLElemStyle('width', '186px', 'stop', false);
setHTMLElemStyle('height', '27px', 'stop', false);
setHTMLElemStyle('bottom', '0', 'stop', false);
setHTMLElemStyle('marginBottom', '60px', 'stop', false);
setHTMLElemStyle('marginLeft', '20px', 'stop', false);
setHTMLElemStyle('zIndex', '2', 'stop', false);

addHTMLElement('div', 'pop_A', 'TO', ['BODY']);
setHTMLElemStyle('position', 'absolute', 'pop_A', false);
setHTMLElemStyle('backgroundImage', 'url("pop_gelenk.gif")', 'pop_A', false);
setHTMLElemStyle('width', '160px', 'pop_A', false);
setHTMLElemStyle('height', '394px', 'pop_A', false);
setHTMLElemStyle('borderRadius', '12px 12px 12px 12px', 'pop_A', false);
setHTMLElemStyle('boxShadow', '3px 3px 6px 0px rgba(0,0,0,0.2)', 'pop_A', false);
setHTMLElemStyle('opacity', '0.9', 'pop_A', false);
setHTMLElemStyle('zIndex', '10', 'pop_A', false);
setHTMLElemStyle('display', 'none', 'pop_A', false);
setHTMLElemStyle('cursor', 'auto', 'pop_A', false);

addHTMLElement('div', 'pop_B', 'TO', ['BODY']);
setHTMLElemStyle('position', 'absolute', 'pop_B', false);
setHTMLElemStyle('backgroundImage', 'url("pop_knorpel.gif")', 'pop_B', false);
setHTMLElemStyle('width', '160px', 'pop_B', false);
setHTMLElemStyle('height', '150px', 'pop_B', false);
setHTMLElemStyle('borderRadius', '12px 12px 12px 12px', 'pop_B', false);
setHTMLElemStyle('boxShadow', '3px 3px 6px 0px rgba(0,0,0,0.2)', 'pop_B', false);
setHTMLElemStyle('opacity', '0.9', 'pop_B', false);
setHTMLElemStyle('zIndex', '10', 'pop_B', false);
setHTMLElemStyle('display', 'none', 'pop_B', false);
setHTMLElemStyle('cursor', 'pointer', 'pop_B', false);

addHTMLElement('div', 'pop_C', 'TO', ['BODY']);
setHTMLElemStyle('position', 'absolute', 'pop_C', false);
setHTMLElemStyle('backgroundImage', 'url("pop_patella.gif")', 'pop_C', false);
setHTMLElemStyle('width', '160px', 'pop_C', false);
setHTMLElemStyle('height', '150px', 'pop_C', false);
setHTMLElemStyle('borderRadius', '12px 12px 12px 12px', 'pop_C', false);
setHTMLElemStyle('boxShadow', '3px 3px 6px 0px rgba(0,0,0,0.2)', 'pop_C', false);
setHTMLElemStyle('opacity', '0.9', 'pop_C', false);
setHTMLElemStyle('zIndex', '10', 'pop_C', false);
setHTMLElemStyle('display', 'none', 'pop_C', false);
setHTMLElemStyle('cursor', 'pointer', 'pop_C', false);

addHTMLElement('div', 'pop_D', 'TO', ['BODY']);
setHTMLElemStyle('position', 'absolute', 'pop_D', false);
setHTMLElemStyle('backgroundImage', 'url("pop_kreuzband.gif")', 'pop_D', false);
setHTMLElemStyle('width', '160px', 'pop_D', false);
setHTMLElemStyle('height', '260px', 'pop_D', false);
setHTMLElemStyle('borderRadius', '12px 12px 12px 12px', 'pop_D', false);
setHTMLElemStyle('boxShadow', '3px 3px 6px 0px rgba(0,0,0,0.2)', 'pop_D', false);
setHTMLElemStyle('opacity', '0.9', 'pop_D', false);
setHTMLElemStyle('zIndex', '10', 'pop_D', false);
setHTMLElemStyle('display', 'none', 'pop_D', false);
setHTMLElemStyle('cursor', 'pointer', 'pop_D', false);

addHTMLElement('div', 'pop_E', 'TO', ['BODY']);
setHTMLElemStyle('position', 'absolute', 'pop_E', false);
setHTMLElemStyle('backgroundImage', 'url("pop_meniskus.gif")', 'pop_E', false);
setHTMLElemStyle('width', '160px', 'pop_E', false);
setHTMLElemStyle('height', '260px', 'pop_E', false);
setHTMLElemStyle('borderRadius', '12px 12px 12px 12px', 'pop_E', false);
setHTMLElemStyle('boxShadow', '3px 3px 6px 0px rgba(0,0,0,0.2)', 'pop_E', false);
setHTMLElemStyle('opacity', '0.9', 'pop_E', false);
setHTMLElemStyle('zIndex', '10', 'pop_E', false);
setHTMLElemStyle('display', 'none', 'pop_E', false);
setHTMLElemStyle('cursor', 'pointer', 'pop_E', false);

addHTMLElement('div', 'anatomie-on', 'TO', ['BODY']);
setHTMLElemStyle('position', 'absolute', 'anatomie-on', false);
setHTMLElemStyle('backgroundImage', 'url("anatomie_on.png")', 'anatomie-on', false);
setHTMLElemStyle('width', '186px', 'anatomie-on', false);
setHTMLElemStyle('height', '27px', 'anatomie-on', false);
setHTMLElemStyle('bottom', '0', 'anatomie-on', false);
setHTMLElemStyle('marginLeft', '20px', 'anatomie-on', false);
setHTMLElemStyle('marginBottom', '30px', 'anatomie-on', false);
setHTMLElemStyle('display', 'none', 'anatomie-on', false);

addHTMLElement('div', 'anatomie-off', 'TO', ['BODY']);
setHTMLElemStyle('position', 'absolute', 'anatomie-off', false);
setHTMLElemStyle('backgroundImage', 'url("anatomie_off.png")', 'anatomie-off', false);
setHTMLElemStyle('width', '186px', 'anatomie-off', false);
setHTMLElemStyle('height', '27px', 'anatomie-off', false);
setHTMLElemStyle('bottom', '0', 'anatomie-off', false);
setHTMLElemStyle('marginLeft', '20px', 'anatomie-off', false);
setHTMLElemStyle('marginBottom', '30px', 'anatomie-off', false);

eventHTMLElem('click', 'button_A', false, function(event) {
  setHTMLElemStyle('display', 'none', 'pop_B', false);
  setHTMLElemStyle('display', 'none', 'pop_C', false);
  setHTMLElemStyle('display', 'none', 'pop_D', false);
  setHTMLElemStyle('display', 'none', 'pop_E', false);
  tweenCamera('A_move', 'button_A', 1, function() {});
  registerSetTimeout(1, function() {
    setHTMLElemStyle('display', 'block', 'pop_A', false);
    setHTMLElemStyle('top', '50%', 'pop_A', false);
    setHTMLElemStyle('left', '50%', 'pop_A', false);
    setHTMLElemStyle('transform', 'translate(-50%, -50%)', 'pop_A', false);
  });
});
eventHTMLElem('click', 'pop_A', false, function(event) {
  setHTMLElemStyle('display', 'none', 'pop_A', false);
  tweenCamera('home_move', 'look', 1, function() {});
  setHTMLElemStyle('cursor', 'pointer', 'button_A', false);
});

eventHTMLElem('click', 'button_B', false, function(event) {
  setHTMLElemStyle('display', 'none', 'pop_A', false);
  setHTMLElemStyle('display', 'none', 'pop_C', false);
  setHTMLElemStyle('display', 'none', 'pop_D', false);
  setHTMLElemStyle('display', 'none', 'pop_E', false);
  tweenCamera('B_move', 'button_B', 1, function() {});
  registerSetTimeout(1, function() {
    setHTMLElemStyle('display', 'block', 'pop_B', false);
    setHTMLElemStyle('top', '50%', 'pop_B', false);
    setHTMLElemStyle('left', '50%', 'pop_B', false);
    setHTMLElemStyle('transform', 'translate(-50%, -50%)', 'pop_B', false);
  });
});
eventHTMLElem('click', 'pop_B', false, function(event) {
  setHTMLElemStyle('display', 'none', 'pop_B', false);
  tweenCamera('home_move', 'look', 1, function() {});
  setHTMLElemStyle('cursor', 'pointer', 'button_B', false);
});

eventHTMLElem('click', 'button_C', false, function(event) {
  setHTMLElemStyle('display', 'none', 'pop_A', false);
  setHTMLElemStyle('display', 'none', 'pop_B', false);
  setHTMLElemStyle('display', 'none', 'pop_E', false);
  setHTMLElemStyle('display', 'none', 'pop_D', false);
  tweenCamera('C_move', 'button_C', 1, function() {});
  registerSetTimeout(1, function() {
    setHTMLElemStyle('display', 'block', 'pop_C', false);
    setHTMLElemStyle('top', '50%', 'pop_C', false);
    setHTMLElemStyle('left', '50%', 'pop_C', false);
    setHTMLElemStyle('transform', 'translate(-50%, -50%)', 'pop_C', false);
  });
});
eventHTMLElem('click', 'pop_C', false, function(event) {
  setHTMLElemStyle('display', 'none', 'pop_C', false);
  tweenCamera('home_move', 'look', 1, function() {});
  setHTMLElemStyle('cursor', 'pointer', 'button_C', false);
});

eventHTMLElem('click', 'button_D', false, function(event) {
  setHTMLElemStyle('display', 'none', 'pop_A', false);
  setHTMLElemStyle('display', 'none', 'pop_B', false);
  setHTMLElemStyle('display', 'none', 'pop_C', false);
  setHTMLElemStyle('display', 'none', 'pop_E', false);
  tweenCamera('D_move', 'button_D', 1, function() {});
  registerSetTimeout(1, function() {
    setHTMLElemStyle('display', 'block', 'pop_D', false);
    setHTMLElemStyle('top', '50%', 'pop_D', false);
    setHTMLElemStyle('left', '50%', 'pop_D', false);
    setHTMLElemStyle('transform', 'translate(-50%, -50%)', 'pop_D', false);
  });
});
eventHTMLElem('click', 'pop_D', false, function(event) {
  setHTMLElemStyle('display', 'none', 'pop_D', false);
  tweenCamera('home_move', 'look', 1, function() {});
  setHTMLElemStyle('cursor', 'pointer', 'button_D', false);
});

eventHTMLElem('click', 'button_E', false, function(event) {
  setHTMLElemStyle('display', 'none', 'pop_A', false);
  setHTMLElemStyle('display', 'none', 'pop_B', false);
  setHTMLElemStyle('display', 'none', 'pop_C', false);
  setHTMLElemStyle('display', 'none', 'pop_D', false);
  tweenCamera('E_move', 'button_E', 1, function() {});
  registerSetTimeout(1, function() {
    setHTMLElemStyle('display', 'block', 'pop_E', false);
    setHTMLElemStyle('top', '50%', 'pop_E', false);
    setHTMLElemStyle('left', '50%', 'pop_E', false);
    setHTMLElemStyle('transform', 'translate(-50%, -50%)', 'pop_E', false);
  });
});
eventHTMLElem('click', 'pop_E', false, function(event) {
  setHTMLElemStyle('display', 'none', 'pop_E', false);
  tweenCamera('home_move', 'look', 1, function() {});
  setHTMLElemStyle('cursor', 'pointer', 'button_E', false);
});

operateLineObjectHTML('button_A', 'button_A', false, 1, '#e8e8e8', 2, 'DRAW');
operateLineObjectHTML('button_B', 'button_B', false, 1, '#e8e8e8', 2, 'DRAW');
operateLineObjectHTML('button_C', 'button_C', false, 1, '#e8e8e8', 2, 'DRAW');
operateLineObjectHTML('button_D', 'button_D', false, 1, '#e8e8e8', 2, 'DRAW');
operateLineObjectHTML('button_E', 'button_E', false, 1, '#e8e8e8', 2, 'DRAW');


operateAnimation('PLAY', 'metarig', 50, 250, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('PLAY', 'button_A', 50, 250, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('PLAY', 'button_B', 50, 250, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('PLAY', 'button_C', 50, 250, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('PLAY', 'button_D', 50, 250, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('PLAY', 'button_E', 50, 250, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('PLAY', 'A_ana', 50, 250, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('PLAY', 'B_ana', 50, 250, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('PLAY', 'C_ana', 50, 250, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('PLAY', 'D_ana', 50, 250, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('PLAY', 'E_ana', 50, 250, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('PLAY', 'F_ana', 50, 250, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('PLAY', 'G_ana', 50, 250, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('PLAY', 'H_ana', 50, 250, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('PLAY', 'I_ana', 50, 250, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('PLAY', 'J_ana', 50, 250, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('PLAY', 'button_A', 50, 250, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('PLAY', 'knie', 50, 250, 'AUTO', 1,
        function() {}, undefined, false);

    animation = 'play';
setHTMLElemStyle('cursor', 'pointer', 'stop', false);
eventHTMLElem('click', 'stop', false, function(event) {
  if (animation == 'play') {

    operateAnimation('PAUSE', 'metarig', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PAUSE', 'knie', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PAUSE', 'button_A', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PAUSE', 'button_B', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PAUSE', 'button_C', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PAUSE', 'button_D', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PAUSE', 'button_E', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PAUSE', 'A_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PAUSE', 'B_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PAUSE', 'C_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PAUSE', 'D_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PAUSE', 'E_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PAUSE', 'F_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PAUSE', 'G_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PAUSE', 'H_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PAUSE', 'I_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PAUSE', 'J_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);

        setHTMLElemStyle('backgroundImage', 'url("play.png")', 'stop', false);
    animation = 'stop';
  } else {

    operateAnimation('RESUME', 'metarig', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('RESUME', 'knie', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('RESUME', 'button_A', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('RESUME', 'button_B', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('RESUME', 'button_C', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('RESUME', 'button_D', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('RESUME', 'button_E', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('RESUME', 'A_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('RESUME', 'B_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('RESUME', 'D_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('RESUME', 'D_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('RESUME', 'E_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('RESUME', 'F_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('RESUME', 'G_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('RESUME', 'H_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('RESUME', 'I_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('RESUME', 'J_ana', null, null, 'AUTO', 1,
            function() {}, undefined, false);

        setHTMLElemStyle('backgroundImage', 'url("stop.png")', 'stop', false);
    animation = 'play';
  }
});

annos = 'hide';
setHTMLElemStyle('cursor', 'pointer', 'anatomie-off', false);
eventHTMLElem('click', 'anatomie-off', false, function(event) {
  if (annos == 'hide') {
    setHTMLElemStyle('display', 'block', 'A', false);
    setHTMLElemStyle('display', 'block', 'B', false);
    setHTMLElemStyle('display', 'block', 'C', false);
    setHTMLElemStyle('display', 'block', 'D', false);
    setHTMLElemStyle('display', 'block', 'E', false);
    setHTMLElemStyle('display', 'block', 'F', false);
    setHTMLElemStyle('display', 'block', 'G', false);
    setHTMLElemStyle('display', 'block', 'H', false);
    setHTMLElemStyle('display', 'block', 'I', false);
    setHTMLElemStyle('display', 'block', 'J', false);
    setHTMLElemStyle('backgroundImage', 'url("anatomie_on.png")', 'anatomie-off', false);
    annos = 'show';
  } else {
    setHTMLElemStyle('display', 'none', 'A', false);
    setHTMLElemStyle('display', 'none', 'B', false);
    setHTMLElemStyle('display', 'none', 'C', false);
    setHTMLElemStyle('display', 'none', 'D', false);
    setHTMLElemStyle('display', 'none', 'E', false);
    setHTMLElemStyle('display', 'none', 'F', false);
    setHTMLElemStyle('display', 'none', 'G', false);
    setHTMLElemStyle('display', 'none', 'H', false);
    setHTMLElemStyle('display', 'none', 'I', false);
    setHTMLElemStyle('display', 'none', 'J', false);
    setHTMLElemStyle('backgroundImage', 'url("anatomie_off.png")', 'anatomie-off', false);
    annos = 'hide';
  }
});

addHTMLElement('div', 'A', 'TO', ['BODY']);
setHTMLElemAttribute('innerHTML', 'Â§ßËÖøÈ™®', 'A', false);
setHTMLElemStyle('marginLeft', '-10px', 'A', false);
setHTMLElemStyle('backgroundColor', '#6e6e6e', 'A', false);
setHTMLElemStyle('borderRadius', '12px 12px 12px 0px', 'A', false);
setHTMLElemStyle('borderStyle', 'solid', 'A', false);
setHTMLElemStyle('borderColor', '#ffffff', 'A', false);
setHTMLElemStyle('borderWidth', '1px', 'A', false);
setHTMLElemStyle('width', '140px', 'A', false);
setHTMLElemStyle('height', '26px', 'A', false);
setHTMLElemStyle('opacity', '0.5', 'A', false);
setHTMLElemStyle('fontFamily', 'Helvetica, sans-serif', 'A', false);
setHTMLElemStyle('lineHeight', '26px', 'A', false);
setHTMLElemStyle('fontSize', '12px', 'A', false);
setHTMLElemStyle('color', '#ffffff', 'A', false);
setHTMLElemStyle('padding', '0', 'A', false);
setHTMLElemStyle('textAlign', 'center', 'A', false);
setHTMLElemStyle('textAlign', '-webkit-center', 'A', false);
setHTMLElemStyle('outline', 'none', 'A', false);
setHTMLElemStyle('userSelect', 'none', 'A', false);
setHTMLElemStyle('display', 'none', 'A', false);
setHTMLElemStyle('cursor', 'all-scroll', 'A', false);
bindHTMLObject('A_ana', 'A', false);

addHTMLElement('div', 'B', 'TO', ['BODY']);
setHTMLElemAttribute('innerHTML', 'ËÉ´È™®', 'B', false);
setHTMLElemStyle('marginLeft', '-80px', 'B', false);
setHTMLElemStyle('backgroundColor', '#6e6e6e', 'B', false);
setHTMLElemStyle('borderRadius', '12px 12px 0px 12px', 'B', false);
setHTMLElemStyle('borderStyle', 'solid', 'B', false);
setHTMLElemStyle('borderColor', '#ffffff', 'B', false);
setHTMLElemStyle('borderWidth', '1px', 'B', false);
setHTMLElemStyle('width', '80px', 'B', false);
setHTMLElemStyle('height', '26px', 'B', false);
setHTMLElemStyle('opacity', '0.5', 'B', false);
setHTMLElemStyle('fontFamily', 'Helvetica, sans-serif', 'B', false);
setHTMLElemStyle('lineHeight', '26px', 'B', false);
setHTMLElemStyle('fontSize', '12px', 'B', false);
setHTMLElemStyle('color', '#ffffff', 'B', false);
setHTMLElemStyle('padding', '0', 'B', false);
setHTMLElemStyle('textAlign', 'center', 'B', false);
setHTMLElemStyle('textAlign', '-webkit-center', 'B', false);
setHTMLElemStyle('outline', 'none', 'B', false);
setHTMLElemStyle('userSelect', 'none', 'B', false);
setHTMLElemStyle('display', 'none', 'B', false);
setHTMLElemStyle('cursor', 'all-scroll', 'B', false);
bindHTMLObject('B_ana', 'B', false);

addHTMLElement('div', 'C', 'TO', ['BODY']);
setHTMLElemAttribute('innerHTML', 'ËÜùÁõñÈ™®', 'C', false);
setHTMLElemStyle('marginLeft', '-10px', 'C', false);
setHTMLElemStyle('backgroundColor', '#6e6e6e', 'C', false);
setHTMLElemStyle('borderRadius', '12px 12px 12px 0px', 'C', false);
setHTMLElemStyle('borderStyle', 'solid', 'C', false);
setHTMLElemStyle('borderColor', '#ffffff', 'C', false);
setHTMLElemStyle('borderWidth', '1px', 'C', false);
setHTMLElemStyle('width', '85px', 'C', false);
setHTMLElemStyle('height', '26px', 'C', false);
setHTMLElemStyle('opacity', '0.5', 'C', false);
setHTMLElemStyle('fontFamily', 'Helvetica, sans-serif', 'C', false);
setHTMLElemStyle('lineHeight', '26px', 'C', false);
setHTMLElemStyle('fontSize', '12px', 'C', false);
setHTMLElemStyle('color', '#ffffff', 'C', false);
setHTMLElemStyle('padding', '0', 'C', false);
setHTMLElemStyle('textAlign', 'center', 'C', false);
setHTMLElemStyle('textAlign', '-webkit-center', 'C', false);
setHTMLElemStyle('outline', 'none', 'C', false);
setHTMLElemStyle('userSelect', 'none', 'C', false);
setHTMLElemStyle('display', 'none', 'C', false);
setHTMLElemStyle('cursor', 'all-scroll', 'C', false);
bindHTMLObject('C_ana', 'C', false);

addHTMLElement('div', 'D', 'TO', ['BODY']);
setHTMLElemAttribute('innerHTML', 'ËÜùÂÖ≥ËäÇÁõòËÇåËÖ±', 'D', false);
setHTMLElemStyle('marginLeft', '-125px', 'D', false);
setHTMLElemStyle('backgroundColor', '#6e6e6e', 'D', false);
setHTMLElemStyle('borderRadius', '12px 12px 0px 12px', 'D', false);
setHTMLElemStyle('borderStyle', 'solid', 'D', false);
setHTMLElemStyle('borderColor', '#ffffff', 'D', false);
setHTMLElemStyle('borderWidth', '1px', 'D', false);
setHTMLElemStyle('width', '125px', 'D', false);
setHTMLElemStyle('height', '26px', 'D', false);
setHTMLElemStyle('opacity', '0.5', 'D', false);
setHTMLElemStyle('fontFamily', 'Helvetica, sans-serif', 'D', false);
setHTMLElemStyle('lineHeight', '26px', 'D', false);
setHTMLElemStyle('fontSize', '12px', 'D', false);
setHTMLElemStyle('color', '#ffffff', 'D', false);
setHTMLElemStyle('padding', '0', 'D', false);
setHTMLElemStyle('textAlign', 'center', 'D', false);
setHTMLElemStyle('textAlign', '-webkit-center', 'D', false);
setHTMLElemStyle('outline', 'none', 'D', false);
setHTMLElemStyle('userSelect', 'none', 'D', false);
setHTMLElemStyle('display', 'none', 'D', false);
setHTMLElemStyle('cursor', 'all-scroll', 'D', false);
bindHTMLObject('D_ana', 'D', false);

addHTMLElement('div', 'E', 'TO', ['BODY']);
setHTMLElemAttribute('innerHTML', 'È´åËÖ±', 'E', false);
setHTMLElemStyle('marginLeft', '-90px', 'E', false);
setHTMLElemStyle('backgroundColor', '#6e6e6e', 'E', false);
setHTMLElemStyle('borderRadius', '12px 12px 0px 12px', 'E', false);
setHTMLElemStyle('borderStyle', 'solid', 'E', false);
setHTMLElemStyle('borderColor', '#ffffff', 'E', false);
setHTMLElemStyle('borderWidth', '1px', 'E', false);
setHTMLElemStyle('width', '90px', 'E', false);
setHTMLElemStyle('height', '26px', 'E', false);
setHTMLElemStyle('opacity', '0.5', 'E', false);
setHTMLElemStyle('fontFamily', 'Helvetica, sans-serif', 'E', false);
setHTMLElemStyle('lineHeight', '26px', 'E', false);
setHTMLElemStyle('fontSize', '12px', 'E', false);
setHTMLElemStyle('color', '#ffffff', 'E', false);
setHTMLElemStyle('padding', '0', 'E', false);
setHTMLElemStyle('textAlign', 'center', 'E', false);
setHTMLElemStyle('textAlign', '-webkit-center', 'E', false);
setHTMLElemStyle('outline', 'none', 'E', false);
setHTMLElemStyle('userSelect', 'none', 'E', false);
setHTMLElemStyle('display', 'none', 'E', false);
setHTMLElemStyle('cursor', 'all-scroll', 'E', false);
bindHTMLObject('E_ana', 'E', false);

addHTMLElement('div', 'F', 'TO', ['BODY']);
setHTMLElemAttribute('innerHTML', 'ÂçäÊúàÊùø', 'F', false);
setHTMLElemStyle('marginLeft', '0px', 'F', false);
setHTMLElemStyle('backgroundColor', '#6e6e6e', 'F', false);
setHTMLElemStyle('borderRadius', '12px 12px 12px 0px', 'F', false);
setHTMLElemStyle('borderStyle', 'solid', 'F', false);
setHTMLElemStyle('borderColor', '#ffffff', 'F', false);
setHTMLElemStyle('borderWidth', '1px', 'F', false);
setHTMLElemStyle('width', '75px', 'F', false);
setHTMLElemStyle('height', '26px', 'F', false);
setHTMLElemStyle('opacity', '0.5', 'F', false);
setHTMLElemStyle('fontFamily', 'Helvetica, sans-serif', 'F', false);
setHTMLElemStyle('lineHeight', '26px', 'F', false);
setHTMLElemStyle('fontSize', '12px', 'F', false);
setHTMLElemStyle('color', '#ffffff', 'F', false);
setHTMLElemStyle('padding', '0', 'F', false);
setHTMLElemStyle('textAlign', 'center', 'F', false);
setHTMLElemStyle('textAlign', '-webkit-center', 'F', false);
setHTMLElemStyle('outline', 'none', 'F', false);
setHTMLElemStyle('userSelect', 'none', 'F', false);
setHTMLElemStyle('display', 'none', 'F', false);
setHTMLElemStyle('cursor', 'all-scroll', 'F', false);
bindHTMLObject('F_ana', 'F', false);

addHTMLElement('div', 'G', 'TO', ['BODY']);
setHTMLElemAttribute('innerHTML', 'ËΩØÈ™®Â±Ç', 'G', false);
setHTMLElemStyle('marginLeft', '0px', 'G', false);
setHTMLElemStyle('backgroundColor', '#6e6e6e', 'G', false);
setHTMLElemStyle('borderRadius', '12px 12px 12px 0px', 'G', false);
setHTMLElemStyle('borderStyle', 'solid', 'G', false);
setHTMLElemStyle('borderColor', '#ffffff', 'G', false);
setHTMLElemStyle('borderWidth', '1px', 'G', false);
setHTMLElemStyle('width', '90px', 'G', false);
setHTMLElemStyle('height', '26px', 'G', false);
setHTMLElemStyle('opacity', '0.5', 'G', false);
setHTMLElemStyle('fontFamily', 'Helvetica, sans-serif', 'G', false);
setHTMLElemStyle('lineHeight', '26px', 'G', false);
setHTMLElemStyle('fontSize', '12px', 'G', false);
setHTMLElemStyle('color', '#ffffff', 'G', false);
setHTMLElemStyle('padding', '0', 'G', false);
setHTMLElemStyle('textAlign', 'center', 'G', false);
setHTMLElemStyle('textAlign', '-webkit-center', 'G', false);
setHTMLElemStyle('outline', 'none', 'G', false);
setHTMLElemStyle('userSelect', 'none', 'G', false);
setHTMLElemStyle('display', 'none', 'G', false);
setHTMLElemStyle('cursor', 'all-scroll', 'G', false);
bindHTMLObject('G_ana', 'G', false);

addHTMLElement('div', 'J', 'TO', ['BODY']);
setHTMLElemAttribute('innerHTML', 'Â§ñÂ∏¶', 'J', false);
setHTMLElemStyle('marginLeft', '-90px', 'J', false);
setHTMLElemStyle('backgroundColor', '#6e6e6e', 'J', false);
setHTMLElemStyle('borderRadius', '12px 12px 0px 12px', 'J', false);
setHTMLElemStyle('borderStyle', 'solid', 'J', false);
setHTMLElemStyle('borderColor', '#ffffff', 'J', false);
setHTMLElemStyle('borderWidth', '1px', 'J', false);
setHTMLElemStyle('width', '90px', 'J', false);
setHTMLElemStyle('height', '26px', 'J', false);
setHTMLElemStyle('opacity', '0.5', 'J', false);
setHTMLElemStyle('fontFamily', 'Helvetica, sans-serif', 'J', false);
setHTMLElemStyle('lineHeight', '26px', 'J', false);
setHTMLElemStyle('fontSize', '12px', 'J', false);
setHTMLElemStyle('color', '#ffffff', 'J', false);
setHTMLElemStyle('padding', '0', 'J', false);
setHTMLElemStyle('textAlign', 'center', 'J', false);
setHTMLElemStyle('textAlign', '-webkit-center', 'J', false);
setHTMLElemStyle('outline', 'none', 'J', false);
setHTMLElemStyle('userSelect', 'none', 'J', false);
setHTMLElemStyle('display', 'none', 'J', false);
setHTMLElemStyle('cursor', 'all-scroll', 'J', false);
bindHTMLObject('J_ana', 'J', false);



addHTMLElement('div', 'H', 'TO', ['BODY']);
setHTMLElemAttribute('innerHTML', 'ÂçÅÂ≠óÈüßÂ∏¶', 'H', false);
setHTMLElemStyle('marginLeft', '-80px', 'H', false);
setHTMLElemStyle('backgroundColor', '#6e6e6e', 'H', false);
setHTMLElemStyle('borderRadius', '12px 12px 0px 12px', 'H', false);
setHTMLElemStyle('borderStyle', 'solid', 'H', false);
setHTMLElemStyle('borderColor', '#ffffff', 'H', false);
setHTMLElemStyle('borderWidth', '1px', 'H', false);
setHTMLElemStyle('width', '80px', 'H', false);
setHTMLElemStyle('height', '26px', 'H', false);
setHTMLElemStyle('opacity', '0.5', 'H', false);
setHTMLElemStyle('fontFamily', 'Helvetica, sans-serif', 'H', false);
setHTMLElemStyle('lineHeight', '26px', 'H', false);
setHTMLElemStyle('fontSize', '12px', 'H', false);
setHTMLElemStyle('color', '#ffffff', 'H', false);
setHTMLElemStyle('padding', '0', 'H', false);
setHTMLElemStyle('textAlign', 'center', 'H', false);
setHTMLElemStyle('textAlign', '-webkit-center', 'H', false);
setHTMLElemStyle('outline', 'none', 'H', false);
setHTMLElemStyle('userSelect', 'none', 'H', false);
setHTMLElemStyle('display', 'none', 'H', false);
setHTMLElemStyle('cursor', 'all-scroll', 'H', false);
bindHTMLObject('H_ana', 'H', false);

addHTMLElement('div', 'I', 'TO', ['BODY']);
setHTMLElemAttribute('innerHTML', 'ÂÜÖÂ∏¶', 'I', false);
setHTMLElemStyle('marginLeft', '-10px', 'I', false);
setHTMLElemStyle('backgroundColor', '#6e6e6e', 'I', false);
setHTMLElemStyle('borderRadius', '12px 12px 12px 0px', 'I', false);
setHTMLElemStyle('borderStyle', 'solid', 'I', false);
setHTMLElemStyle('borderColor', '#ffffff', 'I', false);
setHTMLElemStyle('borderWidth', '1px', 'I', false);
setHTMLElemStyle('width', '80px', 'I', false);
setHTMLElemStyle('height', '26px', 'I', false);
setHTMLElemStyle('opacity', '0.5', 'I', false);
setHTMLElemStyle('fontFamily', 'Helvetica, sans-serif', 'I', false);
setHTMLElemStyle('lineHeight', '26px', 'I', false);
setHTMLElemStyle('fontSize', '12px', 'I', false);
setHTMLElemStyle('color', '#ffffff', 'I', false);
setHTMLElemStyle('padding', '0', 'I', false);
setHTMLElemStyle('textAlign', 'center', 'I', false);
setHTMLElemStyle('textAlign', '-webkit-center', 'I', false);
setHTMLElemStyle('outline', 'none', 'I', false);
setHTMLElemStyle('userSelect', 'none', 'I', false);
setHTMLElemStyle('display', 'none', 'I', false);
setHTMLElemStyle('cursor', 'all-scroll', 'I', false);
bindHTMLObject('I_ana', 'I', false);

addHTMLElement('button', 'Link1', 'TO', ['BODY']);
setHTMLElemStyle('transition', 'bottom 1s', 'Link1', false);
setHTMLElemStyle('bottom', '-230px', 'Link1', false);
setHTMLElemStyle('height', '35px', 'Link1', false);
setHTMLElemStyle('width', '138px', 'Link1', false);
setHTMLElemStyle('position', 'absolute', 'Link1', false);
setHTMLElemStyle('borderRadius', '6px', 'Link1', false);
setHTMLElemStyle('backgroundColor', '#ffffff', 'Link1', false);
setHTMLElemStyle('border', 'none', 'Link1', false);
setHTMLElemStyle('right', '20px', 'Link1', false);
setHTMLElemStyle('zIndex', '10', 'Link1', false);
setHTMLElemAttribute('innerHTML', '&rArr;  suva.ch/88213.d', 'Link1', false);
setHTMLElemAttribute('title', '"suva Knieschoner"', 'Link1', false);
setHTMLElemStyle('fontFamily', 'Helvetica, sans-serif;', 'Link1', false);
setHTMLElemStyle('fontSize', '12px', 'Link1', false);
setHTMLElemStyle('color', '#00b8cf', 'Link1', false);
setHTMLElemStyle('fontWeight', 'bold', 'Link1', false);
setHTMLElemStyle('textAlign', 'left', 'Link1', false);
setHTMLElemStyle('textIndent', '-20px', 'Link1', false);
setHTMLElemStyle('paddingLeft', '30px', 'Link1', false);
setHTMLElemStyle('cursor', 'pointer', 'Link1', false);

eventHTMLElem('mouseover', 'Link1', false, function(event) {
  setHTMLElemStyle('color', '#ff8200', 'Link1', false);
});
eventHTMLElem('mouseout', 'Link1', false, function(event) {
  setHTMLElemStyle('color', '#00b8cf', 'Link1', false);
});
eventHTMLElem('click', 'Link1', false, function(event) {
  openWebPage('https://www.suva.ch/88213.d', 'NEW');
});

eventHTMLElem('click', 'links', false, function(event) {
  setHTMLElemStyle('bottom', '-254px', 'links', false);
  setHTMLElemStyle('bottom', '-230px', 'Link1', false);
  registerSetTimeout(1, function() {
    setHTMLElemStyle('cursor', 'pointer', 'plus', false);
    setHTMLElemStyle('display', 'block', 'plus', false);
  });
});

eventHTMLElem('mouseover', 'plus', false, function(event) {
  setHTMLElemStyle('backgroundImage', 'url("plus_hover.png")', 'plus', false);
});
eventHTMLElem('mouseout', 'plus', false, function(event) {
  setHTMLElemStyle('backgroundImage', 'url("plus.png")', 'plus', false);
});
eventHTMLElem('click', 'plus', false, function(event) {
  setHTMLElemStyle('display', 'none', 'plus', false);
  setHTMLElemStyle('bottom', '0px', 'links', false);
  setHTMLElemStyle('bottom', '20px', 'Link1', false);
});

} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
